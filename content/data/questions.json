[
  {
    "id": 1,
    "code": "RUB",
    "section_id": 1,
    "title": "What is a variable?",
    "description": "Explain what a variable is and how it is used in Ruby.",
    "option_a": "A named container that stores values.",
    "option_b": "A type of loop.",
    "option_c": "A way to define classes.",
    "option_d": "A method of exception handling.",
    "correct_answer": "A named container that stores values.",
    "points": 1
  },
  {
    "id": 2,
    "code": "RUB",
    "section_id": 1,
    "title": "How do you define a local variable in Ruby?",
    "description": "What syntax is used to create a new variable that is local to a specific block of code?",
    "option_a": "Using the 'var' keyword.",
    "option_b": "Using the '@' symbol.",
    "option_c": "Using the '#' symbol.",
    "option_d": "Using the '=' operator.",
    "correct_answer": "Using the '=' operator.",
    "points": 1
  },
  {
    "id": 3,
    "code": "RUB",
    "section_id": 1,
    "title": "What is variable scope?",
    "description": "Explain how a variable's scope affects where it can be accessed and modified within a program.",
    "option_a": "The range of values that a variable can hold.",
    "option_b": "The length of time that a variable exists in memory.",
    "option_c": "The set of rules for naming and using variables in Ruby.",
    "option_d": "The part of a program where a variable can be accessed.",
    "correct_answer": "The part of a program where a variable can be accessed.",
    "points": 1
  },
  {
    "id": 4,
    "code": "RUB",
    "section_id": 1,
    "title": "What is the naming convention for Ruby variables?",
    "description": "What format should be used when naming new variables in a Ruby program?",
    "option_a": "snake_case",
    "option_b": "kebab-case",
    "option_c": "PascalCase",
    "option_d": "camelCase",
    "correct_answer": "snake_case",
    "points": 1
  },
  {
    "id": 5,
    "code": "RUB",
    "section_id": 1,
    "title": "What is the value of a variable in Ruby?",
    "description": "What can be stored in a variable in a Ruby program?",
    "option_a": "Only strings",
    "option_b": "Only numbers",
    "option_c": "Any type of data",
    "option_d": "Only boolean values",
    "correct_answer": "Any type of data",
    "points": 1
  },
  {
    "id": 6,
    "code": "RUB",
    "section_id": 1,
    "title": "What is variable reassignment?",
    "description": "Explain what happens when a variable is reassigned in a Ruby program.",
    "option_a": "The variable is deleted from memory.",
    "option_b": "The variable's scope is changed.",
    "option_c": "The variable's value is updated to a new value.",
    "option_d": "The variable is passed to a method as an argument.",
    "correct_answer": "The variable's value is updated to a new value.",
    "points": 1
  },
  {
    "id": 7,
    "code": "RUB",
    "section_id": 1,
    "title": "What is a constant in Ruby?",
    "description": "Explain how a constant is defined and used in a Ruby program.",
    "option_a": "A type of variable that cannot be reassigned.",
    "option_b": "A method of exception handling.",
    "option_c": "A way to define classes.",
    "option_d": "A type of loop.",
    "correct_answer": "A type of variable that cannot be reassigned.",
    "points": 1
  },
  {
    "id": 8,
    "code": "RUB",
    "section_id": 1,
    "title": "What is the difference between a local variable and an instance variable?",
    "description": "Explain how these two types of variables differ and when they are used in a Ruby program.",
    "option_a": "A local variable can only be used within a specific method, while an instance variable can be used across multiple methods.",
    "option_b": "A local variable is defined using the '@' symbol, while an instance variable is defined using the '=' operator.",
    "option_c": "A local variable can be reassigned, while an instance variable cannot be reassigned once it has been defined.",
    "option_d": "A local variable is stored in the program's memory, while an instance variable is stored on disk and can be accessed by other programs.",
    "correct_answer": "A local variable can only be used within a specific method, while an instance variable can be used across multiple methods.",
    "points": 1
  },
  {
    "id": 9,
    "code": "RUB",
    "section_id": 1,
    "title": "What is variable interpolation?",
    "description": "Explain how variable interpolation is used to join strings and variables in a Ruby program.",
    "option_a": "A way to calculate the value of a variable at runtime.",
    "option_b": "A method of exception handling.",
    "option_c": "A way to insert the value of a variable into a string.",
    "option_d": "A way to define classes.",
    "correct_answer": "A way to insert the value of a variable into a string.",
    "points": 1
  },
  {
    "id": 10,
    "code": "RUB",
    "section_id": 1,
    "title": "What is a global variable?",
    "description": "Describe what a global variable is and how it can be used in a Ruby program.",
    "option_a": "A variable that can be accessed and modified from any part of a program.",
    "option_b": "A type of variable that is only used within a class.",
    "option_c": "A variable that is passed as an argument to a method.",
    "option_d": "A way to define constants within a program.",
    "correct_answer": "A variable that can be accessed and modified from any part of a program.",
    "points": 1
  }
]
[
  {
    "id": 11,
    "code": "RUB",
    "section_id": 2,
    "title": "What is a conditional statement?",
    "description": "Explain how a conditional statement is used in Ruby to control program flow.",
    "option_a": "A statement that is always executed when a Ruby program is run.",
    "option_b": "A type of loop that runs a specific number of times.",
    "option_c": "A way to group related code together.",
    "option_d": "A statement that is only executed if a certain condition is true.",
    "correct_answer": "A statement that is only executed if a certain condition is true.",
    "points": 1
  },
  {
    "id": 12,
    "code": "RUB",
    "section_id": 2,
    "title": "What is a boolean expression?",
    "description": "Explain what a boolean expression is and how it is used in conditionals.",
    "option_a": "An expression that is always true.",
    "option_b": "An expression that evaluates to a number.",
    "option_c": "An expression that evaluates to either true or false.",
    "option_d": "An expression that includes a string.",
    "correct_answer": "An expression that evaluates to either true or false.",
    "points": 1
  },
  {
    "id": 13,
    "code": "RUB",
    "section_id": 2,
    "title": "What is an if statement?",
    "description": "Explain how an if statement is used in Ruby and give an example.",
    "option_a": "A statement that is used to define a new method.",
    "option_b": "A statement that is used to print output to the console.",
    "option_c": "A statement that is used to execute code only when a certain condition is true.",
    "option_d": "A statement that is used to repeat a block of code a specific number of times.",
    "correct_answer": "A statement that is used to execute code only when a certain condition is true.",
    "points": 1
  },
  {
    "id": 14,
    "code": "RUB",
    "section_id": 2,
    "title": "What is an else statement?",
    "description": "What is the purpose of an else statement in a conditional structure?",
    "option_a": "To test a second condition if the first one is false.",
    "option_b": "To execute code if the condition in the if statement is not met.",
    "option_c": "To repeat a block of code multiple times.",
    "option_d": "To exit out of a loop early.",
    "correct_answer": "To execute code if the condition in the if statement is not met.",
    "points": 1
  },
  {
    "id": 15,
    "code": "RUB",
    "section_id": 2,
    "title": "What is an elsif statement?",
    "description": "What is the purpose of an elsif statement in a conditional structure and give an example.",
    "option_a": "To test a second condition if the first one is false.",
    "option_b": "To execute code if the condition in the if statement is not met.",
    "option_c": "To repeat a block of code multiple times.",
    "option_d": "To exit out of a loop early.",
    "correct_answer": "To test a second condition if the first one is false.",
    "points": 1
  },
  {
    "id": 16,
    "code": "RUB",
    "section_id": 2,
    "title": "What is a case statement?",
    "description": "Explain how a case statement is used in Ruby and give an example.",
    "option_a": "A statement that is used to print output to the console.",
    "option_b": "A statement that is used to define a new method.",
    "option_c": "A statement that is used to execute code based on the value of a variable.",
    "option_d": "A statement that is used to repeat a block of code a specific number of times.",
    "correct_answer": "A statement that is used to execute code based on the value of a variable.",
    "points": 1
  },
  {
    "id": 17,
    "code": "RUB",
    "section_id": 2,
    "title": "What is a ternary operator?",
    "description": "Explain how a ternary operator is used in Ruby and give an example.",
    "option_a": "An operator that is used to test multiple conditions in a single statement.",
    "option_b": "An operator that is used to assign a value to a variable based on a condition.",
    "option_c": "An operator that is used to calculate the remainder of a division operation.",
    "option_d": "An operator that is used to increment or decrement a variable.",
    "correct_answer": "An operator that is used to assign a value to a variable based on a condition.",
    "points": 1
  },
  {
    "id": 18,
    "code": "RUB",
    "section_id": 2,
    "title": "What is a truthy value in Ruby?",
    "description": "Explain what a truthy value is and give an example.",
    "option_a": "A value that evaluates to true in a boolean expression.",
    "option_b": "A value that evaluates to false in a boolean expression.",
    "option_c": "Any non-zero number or non-empty string.",
    "option_d": "Any value that is not nil or false.",
    "correct_answer": "Any value that is not nil or false.",
    "points": 1
  },
  {
    "id": 19,
    "code": "RUB",
    "section_id": 2,
    "title": "What is a falsey value in Ruby?",
    "description": "Explain what a falsey value is and give an example.",
    "option_a": "A value that evaluates to true in a boolean expression.",
    "option_b": "A value that evaluates to false in a boolean expression.",
    "option_c": "Any non-zero number or non-empty string.",
    "option_d": "Any value that is not nil or false.",
    "correct_answer": "A value that evaluates to false in a boolean expression.",
    "points": 1
  },
  {
    "id": 20,
    "code": "RUB",
    "section_id": 2,
    "title": "What is short-circuit evaluation?",
    "description": "Explain how short-circuit evaluation is used in boolean expressions in Ruby.",
    "option_a": "A way to skip over sections of code that are not needed.",
    "option_b": "A way to execute sections of code multiple times.",
    "option_c": "A way to optimize boolean expressions by aborting evaluation as soon as the result is known.",
    "option_d": "A way to delay the execution of a block of code until it is needed.",
    "correct_answer": "A way to optimize boolean expressions by aborting evaluation as soon as the result is known.",
    "points": 1
  }
  {
    "id": 21,
    "code": "JS",
    "section_id": 3,
    "title": "What is a function?",
    "description": "Explain what a function is in JavaScript and how it is used.",
    "option_a": "A way to display output on the screen.",
    "option_b": "A way to repeat a block of code multiple times.",
    "option_c": "A way to group related code together that can be called multiple times.",
    "option_d": "A way to test if a condition is true or false.",
    "correct_answer": "A way to group related code together that can be called multiple times.",
    "points": 1
  },
  {
    "id": 22,
    "code": "JS",
    "section_id": 3,
    "title": "How do you define a function in JavaScript?",
    "description": "Write the syntax for defining a function in JavaScript.",
    "option_a": "function myFunction() {}",
    "option_b": "def myFunction() {}",
    "option_c": "def function:myFunction()",
    "option_d": "def:myFunction()",
    "correct_answer": "function myFunction() {}",
    "points": 1
  },
  {
    "id": 23,
    "code": "JS",
    "section_id": 3,
    "title": "What is a parameter?",
    "description": "Explain what a parameter is in JavaScript and how it is used in function definitions.",
    "option_a": "A way to store data in a function.",
    "option_b": "A way to group related code together that can be called multiple times.",
    "option_c": "A way to pass data into a function when it is called.",
    "option_d": "A way to test if a condition is true or false.",
    "correct_answer": "A way to pass data into a function when it is called.",
    "points": 1
  },
  {
    "id": 24,
    "code": "JS",
    "section_id": 3,
    "title": "What is a return statement?",
    "description": "Explain what a return statement does in a JavaScript function and give an example.",
    "option_a": "A way to call a function multiple times.",
    "option_b": "A way to stop the execution of a function.",
    "option_c": "A way to output data from a function.",
    "option_d": "A way to start a loop that repeats a block of code.",
    "correct_answer": "A way to output data from a function.",
    "points": 1
  },
  {
    "id": 25,
    "code": "JS",
    "section_id": 3,
    "title": "What is a callback function?",
    "description": "Explain what a callback function is in JavaScript and give an example.",
    "option_a": "A function that is called in a loop.",
    "option_b": "A function that is passed as an argument to another function.",
    "option_c": "A function that is only executed if a certain condition is true.",
    "option_d": "A function that is used to group related code together.",
    "correct_answer": "A function that is passed as an argument to another function.",
    "points": 1
  },
  {
    "id": 26,
    "code": "JS",
    "section_id": 3,
    "title": "What is a higher-order function?",
    "description": "Explain what a higher-order function is in JavaScript and give an example.",
    "option_a": "A function that is passed as an argument to another function.",
    "option_b": "A function that is only executed if a certain condition is true.",
    "option_c": "A function that is used to output data from a function.",
    "option_d": "A function that is used to group related code together.",
    "correct_answer": "A function that takes one or more functions as arguments or returns a function as its result.",
    "points": 1
  },
  {
    "id": 27,
    "code": "JS",
    "section_id": 3,
    "title": "What is a closure?",
    "description": "Explain what a closure is in JavaScript and give an example.",
    "option_a": "A way to output data from a function.",
    "option_b": "A way to group related code together.",
    "option_c": "A way to delay the execution of a block of code until it is needed.",
    "option_d": "A way to access variables from an outer function in an inner function.",
    "correct_answer": "A way to access variables from an outer function in an inner function.",
    "points": 1
  },
  {
    "id": 28,
    "code": "JS",
    "section_id": 3,
    "title": "What is a module?",
    "description": "Explain what a module is in JavaScript and how it is used.",
    "option_a": "A way to group related code together.",
    "option_b": "A way to execute code based on the value of a variable.",
    "option_c": "A way to optimize boolean expressions by aborting evaluation as soon as the result is known.",
    "option_d": "A way to assign a value to a variable based on a condition.",
    "correct_answer": "A way to group related code together and/or encapsulate functionality to prevent naming collisions and promote code maintainability.",
    "points": 1
  },
  {
    "id": 29,
    "code": "JS",
    "section_id": 3,
    "title": "What is a constructor function?",
    "description": "Explain what a constructor function is in JavaScript and how it is used.",
    "option_a": "A function that is used to pass data into another function when it is called.",
    "option_b": "A function that is used to set up the initial state of an object.",
    "option_c": "A function that triggers a specific action based on the value of a variable.",
    "option_d": "A way to output data from a function.",
    "correct_answer": "A function that is used to set up the initial state of an object.",
    "points": 1
  },
  {
    "id": 30,
    "code": "JS",
    "section_id": 3,
    "title": "What is an arrow function?",
    "description": "Explain what an arrow function is in JavaScript and give an example.",
    "option_a": "A function that is used to output data from a function.",
    "option_b": "A function that is used to test if a condition is true or false.",
    "option_c": "A shorthand way to define a function.",
    "option_d": "A function that is used to delay the execution of a block of code until it is needed.",
    "correct_answer": "A shorthand way to define a function.",
    "points": 1
  }
  {
    "id": 31,
    "code": "RUB",
    "section_id": 4,
    "title": "What is the output of the following code?\n\n```\ndef multiply(a, b)\n  a * b\nend\n\nputs multiply(3, 4)\n```",
    "description": "",
    "option_a": "34",
    "option_b": "12",
    "option_c": "7",
    "option_d": "Error",
    "correct_answer": "b",
    "points": 1
  },
  {
    "id": 32,
    "code": "RUB",
    "section_id": 4,
    "title": "What does the `yield` keyword do in Ruby?",
    "description": "",
    "option_a": "It is used to define a block of code that can be passed to a method",
    "option_b": "It is used to execute a block of code that has been passed to a method",
    "option_c": "It is used to pass a parameter to a block of code that has been passed to a method",
    "option_d": "It is used to define a parameter that can be passed to a block of code that has been passed to a method",
    "correct_answer": "b",
    "points": 1
  },
  {
    "id": 33,
    "code": "RUB",
    "section_id": 4,
    "title": "What does the following code do?\n\n```\ndef greet(name = 'world')\n  puts \"Hello, \#{name}!\"\nend\n```",
    "description": "",
    "option_a": "It defines a method called `greet` that prints `Hello, world!`",
    "option_b": "It defines a method called `greet` that takes an optional argument and prints `Hello, {argument}!`",
    "option_c": "It defines a method called `greet` that takes a required argument and prints `Hello, {argument}!`",
    "option_d": "It defines a method called `greet` that takes a variable number of arguments and prints `Hello, {arguments}!`",
    "correct_answer": "b",
    "points": 1
  },
  {
    "id": 34,
    "code": "RUB",
    "section_id": 4,
    "title": "What is the output of the following code?\n\n```\ndef add(a, b, c)\n  a + b + c\nend\n\nputs add(1, 2, 3, 4)\n```",
    "description": "",
    "option_a": "6",
    "option_b": "10",
    "option_c": "Error",
    "option_d": "No output",
    "correct_answer": "c",
    "points": 2
  },
  {
    "id": 35,
    "code": "RUB",
    "section_id": 4,
    "title": "What does the following code do?\n\n```\ndef average(*args)\n  args.sum / args.size.to_f\nend\n```",
    "description": "",
    "option_a": "It defines a method called `average` that takes a variable number of arguments and returns their sum divided by their count as a float",
    "option_b": "It defines a method called `average` that takes a variable number of arguments and returns the average of their squares",
    "option_c": "It defines a method called `average` that takes two arguments and returns their arithmetic mean",
    "option_d": "It defines a method called `average` that takes a hash as an argument and returns its average value",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 36,
    "code": "RUB",
    "section_id": 4,
    "title": "Which of the following is not a valid way to define a default argument value for a Ruby method?",
    "description": "",
    "option_a": "`def foo(bar: 42)`",
    "option_b": "`def foo(bar = 42)`",
    "option_c": "`def foo(bar = nil)`",
    "option_d": "`def foo(bar = some_method_call())`",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 37,
    "code": "RUB",
    "section_id": 4,
    "title": "What is the output of the following code?\n\n```\ndef outer\n  x = 10\n\n  def inner\n    puts x\n  end\n\n  inner\nend\n\nouter\n```",
    "description": "",
    "option_a": "10",
    "option_b": "Error",
    "option_c": "No output",
    "option_d": "4",
    "correct_answer": "b",
    "points": 2
  },
  {
    "id": 38,
    "code": "RUB",
    "section_id": 4,
    "title": "What is the difference between `return` and `puts` in a Ruby method?",
    "description": "",
    "option_a": "`return` stops the execution of the method and returns a value, while `puts` prints a value and continues execution",
    "option_b": "`return` prints a value and continues execution, while `puts` stops the execution of the method and returns a value",
    "option_c": "`return` and `puts` are the same thing",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 39,
    "code": "RUB",
    "section_id": 4,
    "title": "What is the output of the following code?\n\n```\ndef foo\n  puts \"hello\"\nend\n\nalias bar foo\n\nbar\n```",
    "description": "",
    "option_a": "hello",
    "option_b": "No output",
    "option_c": "Error",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 40,
    "code": "RUB",
    "section_id": 4,
    "title": "What is a `block` in Ruby and how is it used?",
    "description": "",
    "option_a": "A block is a piece of code that you can pass to a method to be executed inside that method",
    "option_b": "A block is a type of variable in Ruby that is used to store collections of values",
    "option_c": "A block is a type of method in Ruby that can be defined inside another method",
    "option_d": "A block is a keyword in Ruby that is used to define a new scope",
    "correct_answer": "a",
    "points": 2
  }
  {
    "id": 41,
    "code": "RUB",
    "section_id": 5,
    "title": "What does `attr_accessor` do and how is it used in Ruby?",
    "description": "",
    "option_a": "`attr_accessor` generates getter and setter methods for a class's instance variables",
    "option_b": "`attr_accessor` generates a constructor for a class",
    "option_c": "`attr_accessor` generates a destructor for a class",
    "option_d": "`attr_accessor` generates a class method",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 42,
    "code": "RUB",
    "section_id": 5,
    "title": "What is inheritance in object-oriented programming and how is it used in Ruby?",
    "description": "",
    "option_a": "Inheritance is a mechanism by which one class is able to derive the properties of another class. In Ruby, you can define a subclass that inherits from a superclass using the `class` and `superclass` keywords",
    "option_b": "Inheritance is a mechanism by which one method is able to derive the properties of another method. In Ruby, you can define a method that inherits from another method using the `def` and `inherited` keywords",
    "option_c": "Inheritance is a mechanism by which one instance variable is able to derive the properties of another instance variable. In Ruby, you can define an `attr_reader` that inherits from another instance variable using the `inherit` keyword.",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 43,
    "code": "RUB",
    "section_id": 5,
    "title": "What does the following code do?\n\n```\nclass Foo\n  def initialize\n    puts \"Hello, world!\"\n  end\nend\n\nclass Bar < Foo\nend\n\nBar.new\n```",
    "description": "",
    "option_a": "It defines a class called `Foo` and a subclass called `Bar`. The `initialize` method of `Foo` prints `Hello, world!`. The code creates a new instance of `Bar` and calls its `initialize` method, which in turn calls the `initialize` method of its superclass `Foo` and prints `Hello, world!`",
    "option_b": "It defines a class called `Foo` and a subclass called `Bar`. The `initialize` method of `Foo` prints `Hello, world!`. The code creates a new instance of `Bar` and calls its `initialize` method, which prints `Hello, world!`",
    "option_c": "It defines a class called `Foo` and a subclass called `Bar`. The `initialize` method of `Foo` does not do anything. The code creates a new instance of `Bar` and calls its `initialize` method, which prints `Hello, world!`",
    "option_d": "It defines a class called `Foo` and a subclass called `Bar`. The `initialize` method of `Foo` does not do anything. The code creates a new instance of `Bar` and calls its `initialize` method, but nothing is printed",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 44,
    "code": "RUB",
    "section_id": 5,
    "title": "What is an instance variable in Ruby and how is it used in object-oriented programming?",
    "description": "",
    "option_a": "An instance variable is a variable that belongs to a particular instance of a class, rather than to the class itself. It is used to store state information for the instance, and can be accessed and modified by methods defined for the instance",
    "option_b": "An instance variable is a variable that belongs to a class, rather than to any particular instance of the class. It is used to store state information that is shared by all instances of the class",
    "option_c": "An instance variable is a variable that is defined inside a method and can only be accessed and modified within that method",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 45,
    "code": "RUB",
    "section_id": 5,
    "title": "What is method overriding in Ruby and how is it used in object-oriented programming?",
    "description": "",
    "option_a": "Method overriding is a mechanism by which a subclass is able to provide its own implementation of a method that is already defined by its superclasses. In Ruby, you can override a method by defining a method with the same name in the subclass",
    "option_b": "Method overriding is a mechanism by which a superclass is able to provide its own implementation of a method that is already defined by its subclasses. In Ruby, you can override a method by defining a method with the same name in the superclass",
    "option_c": "Method overriding is a mechanism by which two or more classes are able to share a method with the same name and implementation. In Ruby, you can override a method by defining a method with the same name in both classes",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 46,
    "code": "RUB",
    "section_id": 5,
    "title": "What does the following code do?\n\n```\nclass Foo\n  def self.bar\n    puts \"Hello, world!\"\n  end\nend\n\nFoo.bar\n```",
    "description": "",
    "option_a": "It defines a class called `Foo`. The `bar` method is defined as a class method using the `self.` notation. The code calls the `bar` method directly on the `Foo` class and prints `Hello, world!`",
    "option_b": "It defines a class called `Foo`. The `bar` method is defined as an instance method using the `self.` notation. The code creates a new instance of `Foo` and calls its `bar` method, which prints `Hello, world!`",
    "option_c": "It defines a class called `Foo`. The `bar` method is defined as an instance method. The code raises an error because `bar` is not a class method",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 47,
    "code": "RUB",
    "section_id": 5,
    "title": "What is the difference between `include` and `extend` in Ruby?",
    "description": "",
    "option_a": "`include` is used to add instance methods to a class, while `extend` is used to add class methods to a class",
    "option_b": "`include` is used to add class methods to a class, while `extend` is used to add instance methods to a class",
    "option_c": "`include` and `extend` are used interchangeably in Ruby",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 48,
    "code": "RUB",
    "section_id": 5,
    "title": "What is polymorphism in object-oriented programming and how is it used in Ruby?",
    "description": "",
    "option_a": "Polymorphism is the ability of objects to take on different forms or types. In Ruby, you can achieve polymorphism by using inheritance and method overriding",
    "option_b": "Polymorphism is the ability of objects to change their internal state. In Ruby, you can achieve polymorphism by using instance variables and accessors",
    "option_c": "Polymorphism is the ability of objects to dynamically call different methods at runtime. In Ruby, you can achieve polymorphism by using the `send` method",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 49,
    "code": "RUB",
    "section_id": 5,
    "title": "What is encapsulation in object-oriented programming and how is it used in Ruby?",
    "description": "",
    "option_a": "Encapsulation is the practice of hiding the internal state and behavior of an object from the outside world, and only exposing a public interface. In Ruby, you can achieve encapsulation by using `attr_reader`, `attr_writer`, and `attr_accessor` to control access to instance variables",
    "option_b": "Encapsulation is the practice of exposing the internal state and behavior of an object to the outside world. In Ruby, you can achieve encapsulation by using `public`, `private`, and `protected` to control access to methods",
    "option_c": "Encapsulation is the practice of sharing the internal state and behavior of an object with other objects. In Ruby, you can achieve encapsulation by using `include` and `extend` to mix in modules that define common behavior",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 1
  }
  {
    "id": 50,
    "code": "RUB",
    "section_id": 6,
    "title": "What is a module in Ruby and how is it used?",
    "description": "",
    "option_a": "A module is a collection of methods and constants that can be reused across multiple classes. In Ruby, you can define a module using the `module` keyword",
    "option_b": "A module is a special type of class that cannot be instantiated. In Ruby, you can define a module using the `class` keyword",
    "option_c": "A module is a type of method that can only be used within a single class definition. In Ruby, you can define a module using the `def` keyword",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 51,
    "code": "RUB",
    "section_id": 6,
    "title": "What is the difference between a module and a class in Ruby?",
    "description": "",
    "option_a": "A class can be instantiated to create objects, while a module cannot. A module's methods and constants can be mixed in to a class using the `include` keyword",
    "option_b": "A module can be instantiated to create objects, while a class cannot. A class's methods and constants can be mixed in to a module using the `include` keyword",
    "option_c": "A class and a module are the same thing in Ruby",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 52,
    "code": "RUB",
    "section_id": 6,
    "title": "What does `include` do when used with a module in Ruby?",
    "description": "",
    "option_a": "`include` mixes in the methods and constants of a module into a class as instance methods and constants",
    "option_b": "`include` mixes in the methods and constants of a class into a module as class methods and constants",
    "option_c": "`include` mixes in the methods and constants of a module into a module as instance methods and constants",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 53,
    "code": "RUB",
    "section_id": 6,
    "title": "What does `extend` do when used with a module in Ruby?",
    "description": "",
    "option_a": "`extend` mixes in the methods and constants of a module into a class as class methods and constants",
    "option_b": "`extend` mixes in the methods and constants of a class into a module as instance methods and constants",
    "option_c": "`extend` mixes in the methods and constants of a module into a module as class methods and constants",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 54,
    "code": "RUB",
    "section_id": 6,
    "title": "What is the difference between `include` and `extend` when used with a module in Ruby?",
    "description": "",
    "option_a": "`include` mixes in the methods and constants of a module into a class as instance methods and constants, while `extend` mixes in the methods and constants of a module into a class as class methods and constants",
    "option_b": "`include` mixes in the methods and constants of a module into a class as class methods and constants, while `extend` mixes in the methods and constants of a module into a class as instance methods and constants",
    "option_c": "`include` and `extend` are used interchangeably in Ruby",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 55,
    "code": "RUB",
    "section_id": 6,
    "title": "What is a mixin in Ruby and how is it used?",
    "description": "",
    "option_a": "A mixin is a module that contains a set of methods and constants that can be mixed in to a class using the `include` keyword. Mixins are used to share behavior across multiple classes without the use of inheritance",
    "option_b": "A mixin is a type of class that cannot be instantiated. Mixins are used to define abstract behavior that can be implemented by a class",
    "option_c": "A mixin is a type of method that can only be used within a single class definition",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 56,
    "code": "RUB",
    "section_id": 6,
    "title": "What does the following code do?\n\n```\nmodule Foo\n  def bar\n    puts \"Hello, world!\"\n  end\nend\n\nclass Baz\n  include Foo\nend\n\nBaz.new.bar\n```",
    "description": "",
    "option_a": "It defines a module called `Foo` that contains a method called `bar`. It defines a class called `Baz` that includes the `Foo` module using the `include` keyword. The code creates a new instance of `Baz` and calls its `bar` method, which prints `Hello, world!`",
    "option_b": "It defines a module called `Foo` that contains a method called `bar`. It defines a class called `Baz` that extends the `Foo` module using the `extend` keyword. The code creates a new instance of `Baz` and calls its `bar` method, which prints `Hello, world!`",
    "option_c": "It defines a module called `Foo` that contains a method called `bar`. It defines a class called `Baz` that includes the `Foo` module using the `include` keyword. The code raises an error because `bar` is not defined for instances of `Baz`",
    "option_d": "It defines a class called `Foo` that contains a method called `bar`. It defines a module called `Baz` that includes the `Foo` class using the `include` keyword. The code creates a new instance of `Baz` and calls its `bar` method, which prints `Hello, world!`",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 57,
    "code": "RUB",
    "section_id": 6,
    "title": "What is a namespace in Ruby and how is it used with modules?",
    "description": "",
    "option_a": "A namespace is a way of organizing code into a distinct area of scope to avoid naming conflicts. In Ruby, you can create a namespace using a module and the `::` notation",
    "option_b": "A namespace is a way of defining a class that is only available within a specific scope. In Ruby, you can create a namespace using the `private` keyword",
    "option_c": "A namespace is a way of defining a module that is only available within a specific class. In Ruby, you can create a namespace using the `include` keyword",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 58,
    "code": "RUB",
    "section_id": 6,
    "title": "What does the following code do?\n\n```\nmodule Foo\n  def self.bar\n    puts \"Hello, world!\"\n  end\nend\n\nclass Baz\n  extend Foo\nend\n\nBaz.bar\n```",
    "description": "",
    "option_a": "It defines a module called `Foo` that contains a class method called `bar`. It defines a class called `Baz` that extends the `Foo` module using the `extend` keyword. The code calls the `bar` method directly on the `Baz` class and prints `Hello, world!`",
    "option_b": "It defines a module called `Foo` that contains an instance method called `bar`. It defines a class called `Baz` that extends the `Foo` module using the `extend` keyword. The code raises an error because `bar` is not defined as a class method in `Foo`",
    "option_c": "It defines a class called `Foo` that contains an instance method called `bar`. It defines a class called `Baz` that extends the `Foo` class using the `extend` keyword. The code creates a new instance of `Baz` and calls its `bar` method, which prints `Hello, world!`",
    "option_d": "It defines a module called `Foo` that contains an instance method called `bar`. It defines a class called `Baz` that includes the `Foo` module using the `include` keyword. The code creates a new instance of `Baz` and calls its `bar` method, which prints `Hello, world!`",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 59,
    "code": "RUB",
    "section_id": 6,
    "title": "What is the purpose of the `require` keyword in Ruby?",
    "description": "",
    "option_a": "The `require` keyword is used to load external files or libraries into a Ruby program",
    "option_b": "The `require` keyword is used to define a constant in Ruby",
    "option_c": "The `require` keyword is used to create an instance of a class in Ruby",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 60,
    "code": "RUB",
    "section_id": 6,
    "title": "What is a Class in Ruby?",
    "description": "a) A data type b) a special type of method c) an object d) a keyword",
    "option_a": "A data type",
    "option_b": "A special type of method",
    "option_c": "An object",
    "option_d": "A keyword",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 61,
    "code": "RUB",
    "section_id": 7,
    "title": "What is the keyword used to create a new instance of a class in Ruby?",
    "description": "a) new_instance b) create c) new d) make",
    "option_a": "new_instance",
    "option_b": "create",
    "option_c": "new",
    "option_d": "make",
    "correct_answer": "c",
    "points": 1
  },
  {
    "id": 62,
    "code": "RUB",
    "section_id": 7,
    "title": "What are instance variables in Ruby?",
    "description": "a) Variables that belong to the class and are shared among all instances b) Variables that belong to the object itself and can be different for each instance c) Variables that are only accessible inside the class d) Variables that can only be set by the constructor",
    "option_a": "Variables that belong to the class and are shared among all instances",
    "option_b": "Variables that belong to the object itself and can be different for each instance",
    "option_c": "Variables that are only accessible inside the class",
    "option_d": "Variables that can only be set by the constructor",
    "correct_answer": "b",
    "points": 1
  },
  {
    "id": 63,
    "code": "RUB",
    "section_id": 7,
    "title": "What is the difference between a class method and an instance method in Ruby?",
    "description": "a) A class method operates on the class itself, while an instance method operates on instances of the class b) A class method operates on instances of the class, while an instance method operates on the class itself c) Both operate on instances of the class d) There is no difference",
    "option_a": "A class method operates on the class itself, while an instance method operates on instances of the class",
    "option_b": "A class method operates on instances of the class, while an instance method operates on the class itself",
    "option_c": "Both operate on instances of the class",
    "option_d": "There is no difference",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 64,
    "code": "RUB",
    "section_id": 7,
    "title": "What is inheritance in Ruby?",
    "description": "a) A way to create new classes from existing classes b) A way to create objects from classes c) A way to modify existing classes d) A way to add new methods to existing classes",
    "option_a": "A way to create new classes from existing classes",
    "option_b": "A way to create objects from classes",
    "option_c": "A way to modify existing classes",
    "option_d": "A way to add new methods to existing classes",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 65,
    "code": "RUB",
    "section_id": 7,
    "title": "What is the keyword used to indicate that a class inherits from another class?",
    "description": "a) derives b) inherits c) extends d) include",
    "option_a": "derives",
    "option_b": "inherits",
    "option_c": "extends",
    "option_d": "include",
    "correct_answer": "b",
    "points": 1
  },
  {
    "id": 66,
    "code": "RUB",
    "section_id": 7,
    "title": "What is the syntax for calling a parent method from a child class in Ruby?",
    "description": "a) super.method_name(b) parent.method_name(c) self.method_name(d) child.method_name",
    "option_a": "super.method_name",
    "option_b": "parent.method_name",
    "option_c": "self.method_name",
    "option_d": "child.method_name",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 67,
    "code": "RUB",
    "section_id": 7,
    "title": "What is the difference between public and private methods in Ruby?",
    "description": "a) Public methods can be called from anywhere, while private methods can only be called from within the object b) Public methods can only be called from within the object, while private methods can be called from anywhere c) Public methods are inherited by child classes, while private methods are not d) There is no difference",
    "option_a": "Public methods can be called from anywhere, while private methods can only be called from within the object",
    "option_b": "Public methods can only be called from within the object, while private methods can be called from anywhere",
    "option_c": "Public methods are inherited by child classes, while private methods are not",
    "option_d": "There is no difference",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 68,
    "code": "RUB",
    "section_id": 7,
    "title": "What is the keyword used to define a module in Ruby?",
    "description": "a) module b) class c) package d) namespace",
    "option_a": "module",
    "option_b": "class",
    "option_c": "package",
    "option_d": "namespace",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 69,
    "code": "RUB",
    "section_id": 7,
    "title": "What is a Ruby module?",
    "description": "a) A group of related methods b) A way to organize code c) A way to share functionality among classes d) All of the above",
    "option_a": "A group of related methods",
    "option_b": "A way to organize code",
    "option_c": "A way to share functionality among classes",
    "option_d": "All of the above",
    "correct_answer": "d",
    "points": 1
  },
   {
    "id": 70,
    "code": "RUB",
    "section_id": 7,
    "title": "What is the purpose of the \"retry\" keyword in Ruby, and how can it be used to handle exceptions more effectively?",
    "description": "",
    "option_a": "\"retry\" is used to re-execute a block of code that raised an exception, and can be used to retry a failed operation until it succeeds or fails after a certain number of attempts.",
    "option_b": "\"retry\" is used to ignore exceptions and continue executing the program, and can be used to bypass error handling for specific parts of code.",
    "option_c": "\"retry\" is a synonym for \"raise\" and can be used interchangeably.",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 2
  },
  {
    "id": 71,
    "code": "RUB",
    "section_id": 8,
    "title": "What is the purpose of the \"raise\" keyword in Ruby, and how can it be used to handle exceptions?",
    "description": "",
    "option_a": "\"raise\" is used to explicitly raise an exception, and can be used to signal errors or other exceptional conditions",
    "option_b": "\"raise\" is used to ignore exceptions and continue executing the program",
    "option_c": "\"raise\" is used to define a custom error handler, which can be called when an exception is raised",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 2
  },
  {
    "id": 72,
    "code": "RUB",
    "section_id": 8,
    "title": "What is the syntax for defining your own exception classes in Ruby, and how can they be used?",
    "description": "",
    "option_a": "You can define custom exception classes by inheriting from the built-in class \"Exception\", and can use them to represent your own application-specific errors and exceptions.",
    "option_b": "You can define custom exception classes by including the \"Exception\" module into your own classes, and can use them to handle errors and exceptions in your code.",
    "option_c": "Ruby does not support defining custom exception classes.",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 2
  },
  {
    "id": 73,
    "code": "RUB",
    "section_id": 8,
    "title": "What is the difference between the \"ensure\" and \"else\" clauses in Ruby exception handling, and when are they executed?",
    "description": "",
    "option_a": "\"ensure\" is used to define a block of code that is always executed, regardless of whether an exception is raised or not, while \"else\" is used to define a block of code that is executed only if no exception occurs.",
    "option_b": "\"else\" is used to define a block of code that is always executed, regardless of whether an exception is raised or not, while \"ensure\" is used to define a block of code that is executed only if no exception occurs.",
    "option_c": "\"ensure\" and \"else\" are equivalent and have the same behavior.",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 2
  },
  {
    "id": 74,
    "code": "RUB",
    "section_id": 8,
    "title": "How can you use the \"rescue\" modifier in Ruby to handle exceptions more concisely?",
    "description": "",
    "option_a": "You can use the \"rescue\" modifier to specify a single line of code that is executed if an exception occurs.",
    "option_b": "You can use the \"rescue\" modifier to specify a block of code that is executed if an exception occurs.",
    "option_c": "Ruby does not support the use of the \"rescue\" modifier.",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 75,
    "code": "RUB",
    "section_id": 8,
    "title": "What is the hierarchy of exception classes in Ruby, and how can you use this to handle exceptions more effectively?",
    "description": "",
    "option_a": "All exceptions in Ruby inherit from the base class \"Exception\", and can be handled using the same techniques as the base class.",
    "option_b": "Ruby does not have a hierarchy of exception classes.",
    "option_c": "Exceptions in Ruby are organized based on their type and severity, and can be handled more effectively by using specialized exception classes and techniques.",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 3
  },
  {
    "id": 76,
    "code": "RUB",
    "section_id": 8,
    "title": "What is the purpose of the \"rescue\" clause without an argument in Ruby, and how does it affect exception handling?",
    "description": "",
    "option_a": "The \"rescue\" clause without an argument catches all exceptions, regardless of their type, and can be used to provide a catch-all error handler.",
    "option_b": "The \"rescue\" clause without an argument ignores all exceptions, and can be used to bypass error handling for specific parts of code.",
    "option_c": "\"rescue\" clauses without an argument are invalid syntax in Ruby.",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 2
  },
  {
    "id": 77,
    "code": "RUB",
    "section_id": 8,
    "title": "What is the purpose of the global variable \"$!\" in Ruby, and how can you use it to access exception information?",
    "description": "",
    "option_a": "\"$!\" stores the last raised exception, and can be used to access information about the exception such as its message and type.",
    "option_b": "\"$!\" is a reserved keyword in Ruby and cannot be used as a variable name.",
    "option_c": "\"$!\" is equivalent to the exception class \"Exception\", and can be used to compare exceptions and test for error conditions.",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 78,
    "code": "RUB",
    "section_id": 8,
    "title": "What is the syntax for raising a custom exception in Ruby, and how can you handle it using the built-in exception classes?",
    "description": "",
    "option_a": "You can raise a custom exception by calling the \"raise\" keyword with an instance of your custom exception class, and can handle it using the built-in exception classes such as \"StandardError\" and \"RuntimeError\".",
    "option_b": "Ruby does not support the creation of custom exceptions.",
    "option_c": "You can raise a custom exception by calling the method \"Kernel.raise\" with an instance of your custom exception class, and can handle it using the method \"Kernel.catch\".",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 3
  },
  {
    "id": 79,
    "code": "RUB",
    "section_id": 8,
    "title": "How can you use the \"rescue\" clause with multiple arguments in Ruby, and how does this affect exception handling?",
    "description": "",
    "option_a": "You can use the \"rescue\" clause with multiple arguments to specify multiple exception types that should be caught, and can provide separate error handling code for each type of exception.",
    "option_b": "The \"rescue\" clause with multiple arguments is invalid syntax in Ruby, and will raise a syntax error when encountered.",
    "option_c": "You can use the \"rescue\" clause with multiple arguments to specify multiple exception types that should be ignored, and can continue executing the program without interruption.",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 2
  },
  {
    "id": 81,
    "code": "RUB",
    "section_id": 9,
    "title": "What is a Ruby module, and how can it be used to organize code and provide namespace separation?",
    "description": "",
    "option_a": "A module is a collection of methods and constants that can be used to group related functionality together, and can be used to provide a namespace for your code to avoid naming conflicts",
    "option_b": "A module is a special type of class that can be used to define abstract interfaces and semantically similar behavior arrangements, and it can be used to define mixins",
    "option_c": "A module is a way to define instance methods on an object, and can be used to group related functionality that makes sense to be included in a single object",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 2
  },
  {
    "id": 82,
    "code": "RUB",
    "section_id": 9,
    "title": "What is a Ruby mixin, and how can it be used to mix in behavior from multiple modules into a class?",
    "description": "",
    "option_a": "Mixins are a way to include behavior from multiple modules into a single class, and can be used to create complex behavior arrangements",
    "option_b": "Mixins are predefined modules that are built into Ruby, and provide additional functionality for certain types of operations",
    "option_c": "Mixins are a way to define abstract interfaces and semantically similar behavior arrangements, and can be used to define instance methods and constants",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 2
  },
  {
    "id": 83,
    "code": "RUB",
    "section_id": 9,
    "title": "What is the difference between including and extending a module in Ruby, and how do they affect the behavior of a class?",
    "description": "",
    "option_a": "Including a module adds its instance methods to the class, while extending a module adds them as class methods",
    "option_b": "Including a module adds its instance and class methods to the class, while extending a module only adds its instance methods",
    "option_c": "Extending a module adds its instance methods to the class as class methods, while including a module only adds its instance methods",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 3
  },
  {
    "id": 84,
    "code": "RUB",
    "section_id": 9,
    "title": "What is the purpose of the Ruby keyword \"super\", and how can it be used to call a parent class's method?",
    "description": "",
    "option_a": "\"super\" is used to call a method defined in the parent class, and can be used to override the behavior of the parent method by providing additional logic",
    "option_b": "\"super\" is used to call the constructor method in the parent class, and can be used to initialize instance variables defined in the parent class",
    "option_c": "\"super\" is used to call a method defined in the current class, and can be used to avoid naming conflicts with other methods",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 2
  },
  {
    "id": 85,
    "code": "RUB",
    "section_id": 9,
    "title": "What is the syntax for defining a class-level instance variable in Ruby, and how can it be used to share state between instances of a class?",
    "description": "",
    "option_a": "You can define a class-level instance variable by prefixing the variable name with the \"@@\" symbol, and can use it to share state between instances of a class",
    "option_b": "You can define a class-level instance variable by prefixing the variable name with the \"@\" symbol, and can use it to share state between instances of a class",
    "option_c": "Ruby does not support the concept of class-level instance variables",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 3
  },
  {
    "id": 86,
    "code": "RUB",
    "section_id": 9,
    "title": "What is the purpose of the Ruby keyword \"alias\", and how can it be used to create alternative method names for a class's methods?",
    "description": "",
    "option_a": "\"alias\" is used to create alternative method names for a class's methods, and can be used to provide more descriptive names for complex or hard-to-remember method names",
    "option_b": "\"alias\" is used to create copies of a method and its associated constants and variables, and can be used to duplicate code for reuse in multiple contexts",
    "option_c": "\"alias\" is used to define new keywords in the Ruby language, and can be used to extend the language functionality",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 87,
    "code": "RUB",
    "section_id": 9,
    "title": "What is the purpose of a Ruby namespace, and how can it be used to organize code?",
    "description": "",
    "option_a": "A namespace is a way to group related code together using a unique identifier, and can be used to avoid naming conflicts and organize code",
    "option_b": "A namespace is a way to define private methods and constants, and can be used to hide implementation details from outside code",
    "option_c": "A namespace is a way to define abstract interfaces and semantically similar behavior arrangements, and can be used to define mixins",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 2
  },
  {
    "id": 88,
    "code": "RUB",
    "section_id": 9,
    "title": "What is the purpose of the Ruby constant, and how can it be used to define and share values between different parts of a program?",
    "description": "",
    "option_a": "A constant is a variable whose value cannot be changed once it is set, and can be used to define and share values between different parts of a program",
    "option_b": "A constant is a special type of module that provides additional functionality for certain types of operations, and can be used to extend the language",
    "option_c": "A constant is a special type of variable that can only be used within a single module, and can be used to define abstract interfaces and semantically similar behavior arrangements",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 89,
    "code": "RUB",
    "section_id": 9,
    "title": "What is the syntax for including and extending a module in Ruby, and how can they be used to mix in behavior from multiple modules into a class?",
    "description": "",
    "option_a": "You can use the \"include\" keyword to include a module's instance methods in a class, and the \"extend\" keyword to include a module's methods as class methods",
    "option_b": "You can use the \"include\" keyword to include a module's instance methods in a class, and the \"mixin\" keyword to include its class methods",
    "option_c": "You can use the \"module\" keyword to define a new module, and the \"include\" keyword to add it to a class's namespace",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 3
  },
  {
    "id": 90,
    "code": "RUB",
    "section_id": 9,
    "title": "What is the difference between a module and a class in Ruby, and how do they differ in their use cases?",
    "description": "",
    "option_a": "A module is a collection of methods and constants that can be used to group related functionality together, and can be used to provide a namespace for your code to avoid naming conflicts, while a class is a blueprint for creating objects",
    "option_b": "A module is a special type of class that can be used to define abstract interfaces and semantically similar behavior arrangements, while a class is a collection of methods and constants",
    "option_c": "Modules and classes are equivalent in Ruby, and can be used interchangeably",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 2
  }
[
  {
    "id": 91,
    "code": "PY",
    "section_id": 10,
    "title": "What is concurrency, and how is it different from parallelism?",
    "description": "",
    "option_a": "Concurrency is the ability to break down a problem into smaller subtasks that can run concurrently, while parallelism is the ability to execute multiple tasks simultaneously",
    "option_b": "Concurrency is the ability to execute multiple tasks simultaneously, while parallelism is the ability to break down a problem into smaller subtasks that can run concurrently",
    "option_c": "Concurrency and parallelism are equivalent concepts, and can be used interchangeably",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 2
  },
  {
    "id": 92,
    "code": "PY",
    "section_id": 10,
    "title": "What is the Global Interpreter Lock (GIL) in Python, and how does it affect concurrency?",
    "description": "",
    "option_a": "The GIL is a mechanism used by Python to ensure that only one thread at a time can execute Python bytecode, and it limits the ability of Python programs to take full advantage of multiple CPU cores",
    "option_b": "The GIL is a Python package that provides functionality for inter-thread communication, and enhances the ability of Python programs to make use of multiple CPU cores",
    "option_c": "The GIL is a keyword in Python that is used to define a global variable, and can be used to facilitate communication between threads",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 3
  },
  {
    "id": 93,
    "code": "PY",
    "section_id": 10,
    "title": "What is a thread in Python, and how can it be used to perform concurrent computations?",
    "description": "",
    "option_a": "A thread is a lightweight subprocess that can run concurrently with other threads within a single process, and can be used to perform concurrent computations",
    "option_b": "A thread is a Python package that provides functionality for inter-process communication, and can be used to send messages between different processes",
    "option_c": "A thread is a keyword in Python that is used to define a global variable, and can be used to share state between threads",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 2
  },
  {
    "id": 94,
    "code": "PY",
    "section_id": 10,
    "title": "What is the difference between a process and a thread, and how do they differ in their use cases?",
    "description": "",
    "option_a": "A process is an instance of a program that can run independently of other processes, while a thread is a lightweight subprocess that shares the same memory space as other threads within a single process",
    "option_b": "A process and a thread are equivalent concepts in Python, and can be used interchangeably",
    "option_c": "A process and a thread are both used for inter-process communication, but a process runs in its own memory space while a thread shares the same memory space as other threads within a single process",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 3
  },
  {
    "id": 95,
    "code": "PY",
    "section_id": 10,
    "title": "What is the Gevent library in Python, and how can it be used to implement cooperative concurrency?",
    "description": "",
    "option_a": "Gevent is a coroutine-based network library for Python that provides a high-level synchronous API based on the greenlet library, and can be used to implement cooperative concurrency",
    "option_b": "Gevent is a Python package that provides functionality for inter-process communication, and can be used to send messages between different processes",
    "option_c": "Gevent is a keyword in Python that is used to define a global variable, and can be used to share state between threads",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 2
  },
  {
    "id": 96,
    "code": "PY",
    "section_id": 10,
    "title": "What is asynchronous I/O in Python, and how does it differ from synchronous I/O?",
    "description": "",
    "option_a": "Asynchronous I/O is a way of performing I/O operations without blocking the main thread or process, and differs from synchronous I/O by allowing multiple I/O operations to be initiated before others complete",
    "option_b": "Asynchronous I/O is a way of performing I/O operations that blocks the main thread or process until the operation completes, and is a synchronous way of performing I/O",
    "option_c": "Asynchronous I/O is equivalent to multithreading in Python, and allows multiple threads to perform I/O operations simultaneously",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 3
  },
  {
    "id": 97,
    "code": "PY",
    "section_id": 10,
    "title": "What is the asyncio library in Python, and how can it be used to implement asynchronous I/O?",
    "description": "",
    "option_a": "Asyncio is a Python package that provides asynchronous I/O support for network protocols and message processing, and can be used to implement concurrent and cooperative concurrency",
    "option_b": "Asyncio is a Python package that provides functionality for inter-process communication, and can be used to coordinate communication between different processes",
    "option_c": "Asyncio is a keyword in Python that is used to define a coroutine function, and can be used to implement cooperative concurrency",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 2
  },
  {
    "id": 98,
    "code": "PY",
    "section_id": 10,
    "title": "What is a semaphore in Python, and how can it be used to coordinate access to shared resources between multiple threads?",
    "description": "",
    "option_a": "A semaphore is a synchronization primitive in Python that can be used to protect shared resources by limiting the number of threads that can access them at any given time",
    "option_b": "A semaphore is a Python package that provides functionality for inter-thread communication, and can be used to send messages between different threads",
    "option_c": "A semaphore is a keyword in Python that is used to define a lockable resource, and can be used to prevent other threads from accessing it",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 3
  },
  {
    "id": 99,
    "code": "PY",
    "section_id": 10,
    "title": "What is a race condition in concurrency, and how can it lead to unexpected behavior in a program?",
    "description": "",
    "option_a": "A race condition occurs when multiple threads access shared resources in an undefined order, and can lead to unexpected behavior such as incorrect results, deadlocks, or crashes",
    "option_b": "A race condition occurs when multiple threads access shared resources using the same synchronization primitive, and can lead to deadlocks or livelocks",
    "option_c": "A race condition occurs when multiple threads access shared resources using different synchronization primitives, and can lead to inconsistent results due to lack of coordination",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 2
  },
  {
    "id": 100,
    "code": "PY",
    "section_id": 10,
    "title": "What is the purpose of the Lock primitive in Python, and how can it be used to synchronize access to shared resources between multiple threads?",
    "description": "",
    "option_a": "A Lock is a synchronization primitive in Python that can be used to coordinate access to shared resources between multiple threads, and is used to prevent race conditions and ensure that only one thread can access the resource at a time",
    "option_b": "A Lock is a Python package that provides asynchronous I/O support for network protocols and message processing, and can be used to implement concurrent and cooperative concurrency",
    "option_c": "A Lock is a keyword in Python that is used to define a coroutine, and can be used to implement cooperative concurrency",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 2
  }
  {
    "id": 101,
    "code": "RUB",
    "section_id": 11,
    "title": "What method do you use to open a file in Ruby?",
    "description": "a) open_file b) read_file c) load_file d) File.open",
    "option_a": "open_file",
    "option_b": "read_file",
    "option_c": "load_file",
    "option_d": "File.open",
    "correct_answer": "d",
    "points": 1
  },
  {
    "id": 102,
    "code": "RUB",
    "section_id": 11,
    "title": "What does the 'r' mode in the File.open method do?",
    "description": "a) reads from the beginning of the file b) reads from the end of the file c) overwrites the file d) raises an error",
    "option_a": "reads from the beginning of the file",
    "option_b": "reads from the end of the file",
    "option_c": "overwrites the file",
    "option_d": "raises an error",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 103,
    "code": "RUB",
    "section_id": 11,
    "title": "What is the shortcut to open and read a file in one line?",
    "description": "a) File.read(filename) b) open(filename, 'r') c) File.new(filename, 'r') d) read_file(filename)",
    "option_a": "File.read(filename)",
    "option_b": "open(filename, 'r')",
    "option_c": "File.new(filename, 'r')",
    "option_d": "read_file(filename)",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 104,
    "code": "RUB",
    "section_id": 11,
    "title": "How do you write to a file in Ruby?",
    "description": "a) File.write(filename, 'text') b) file.write('text') c) write_file(filename, 'text') d) open(filename, 'w')",
    "option_a": "File.write(filename, 'text')",
    "option_b": "file.write('text')",
    "option_c": "write_file(filename, 'text')",
    "option_d": "open(filename, 'w')",
    "correct_answer": "d",
    "points": 1
  },
  {
    "id": 105,
    "code": "RUB",
    "section_id": 11,
    "title": "What is the difference between 'w' and 'a' mode in the File.open method?",
    "description": "a) 'w' overwrites the file, while 'a' appends to the file b) 'w' appends to the file, while 'a' overwrites the file c) both overwrite the file d) both append to the file",
    "option_a": "'w' overwrites the file, while 'a' appends to the file",
    "option_b": "'w' appends to the file, while 'a' overwrites the file",
    "option_c": "both overwrite the file",
    "option_d": "both append to the file",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 106,
    "code": "RUB",
    "section_id": 11,
    "title": "What method do you use to close a file in Ruby?",
    "description": "a) file.close() b) close_file(file) c) File.new.close() d) file.end()",
    "option_a": "file.close()",
    "option_b": "close_file(file)",
    "option_c": "File.new.close()",
    "option_d": "file.end()",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 107,
    "code": "RUB",
    "section_id": 11,
    "title": "How do you check if a file exists in Ruby?",
    "description": "a) File.exist?(filename) b) file.exists() c) File.new.exists? d) file.exist?(filename)",
    "option_a": "File.exist?(filename)",
    "option_b": "file.exists()",
    "option_c": "File.new.exists?",
    "option_d": "file.exist?(filename)",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 108,
    "code": "RUB",
    "section_id": 11,
    "title": "What method do you use to delete a file in Ruby?",
    "description": "a) file.delete() b) delete_file(filename) c) File.delete(filename) d) remove_file(filename)",
    "option_a": "file.delete()",
    "option_b": "delete_file(filename)",
    "option_c": "File.delete(filename)",
    "option_d": "remove_file(filename)",
    "correct_answer": "c",
    "points": 1
  },
  {
    "id": 109,
    "code": "RUB",
    "section_id": 11,
    "title": "How do you use the 'gets' method to read user input from the console?",
    "description": "a) gets b) gets.chomp c) gets() d) input()",
    "option_a": "gets",
    "option_b": "gets.chomp",
    "option_c": "gets()",
    "option_d": "input()",
    "correct_answer": "b",
    "points": 1
  },
  {
    "id": 110,
    "code": "RUB",
    "section_id": 11,
    "title": "What is the difference between 'r+' and 'w+' modes in the File.open method?",
    "description": "a) 'r+' reads and writes to the file, starting from the beginning, while 'w+' overwrites the file and starts reading and writing from the beginning b) 'r+' overwrites the file and starts reading and writing from the beginning, while 'w+' reads and writes to the file, starting from the beginning c) both overwrite the file and start reading and writing from the beginning d) both read and write to the file, starting from the beginning",
    "option_a": "'r+' reads and writes to the file, starting from the beginning, while 'w+' overwrites the file and starts reading and writing from the beginning",
    "option_b": "'r+' overwrites the file and starts reading and writing from the beginning, while 'w+' reads and writes to the file, starting from the beginning",
    "option_c": "both overwrite the file and start reading and writing from the beginning",
    "option_d": "both read and write to the file, starting from the beginning",
    "correct_answer": "a",
    "points": 1
  }  
]