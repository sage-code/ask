[
  {
    "id": 1,
    "code": "RUB",
    "title": "Variables",
    "points": 10,
    "description": "Learn about variables and their scope in Ruby."
  },
  {
    "id": 2,
    "code": "RUB",
    "title": "Control Flow",
    "points": 10,
    "description": "Explore loops, conditions and branching statements in Ruby."
  },
  {
    "id": 3,
    "code": "RUB",
    "title": "Data Types",
    "points": 10,
    "description": "Understand the different data types in Ruby, such as strings, integers, booleans, etc."
  },
  {
    "id": 4,
    "code": "RUB",
    "title": "Methods",
    "points": 10,
    "description": "Learn how to define and call methods in Ruby."
  },
  {
    "id": 5,
    "code": "RUB",
    "title": "Object-Oriented Programming",
    "points": 10,
    "description": "Discover the basics of OOP in Ruby, including classes, objects, and inheritance."
  },
  {
    "id": 6,
    "code": "RUB",
    "title": "Modules",
    "points": 10,
    "description": "Explore how to use modules to organize and reuse code in Ruby."
  },
  {
    "id": 7,
    "code": "RUB",
    "title": "Exceptions",
    "points": 10,
    "description": "Learn how to handle exceptions in Ruby, including raising and rescuing them."
  },
  {
    "id": 8,
    "code": "RUB",
    "title": "Regular Expressions",
    "points": 10,
    "description": "Understand how to use regular expressions in Ruby to search and manipulate strings."
  },
  {
    "id": 9,
    "code": "RUB",
    "title": "Blocks and Iterators",
    "points": 10,
    "description": "Discover how to use blocks and iterators in Ruby to iterate over collections and perform complex operations."
  },
  {
    "id": 10,
    "code": "RUB",
    "title": "File I/O",
    "points": 10,
    "description": "Learn how to read and write files in Ruby using various methods and techniques."
  }
  {
    "id": 50,
    "code": "RUB",
    "section_id": 6,
    "title": "What is a module in Ruby and how is it used?",
    "description": "",
    "option_a": "A module is a collection of methods and constants that can be reused across multiple classes. In Ruby, you can define a module using the `module` keyword",
    "option_b": "A module is a special type of class that cannot be instantiated. In Ruby, you can define a module using the `class` keyword",
    "option_c": "A module is a type of method that can only be used within a single class definition. In Ruby, you can define a module using the `def` keyword",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 51,
    "code": "RUB",
    "section_id": 6,
    "title": "What is the difference between a module and a class in Ruby?",
    "description": "",
    "option_a": "A class can be instantiated to create objects, while a module cannot. A module's methods and constants can be mixed in to a class using the `include` keyword",
    "option_b": "A module can be instantiated to create objects, while a class cannot. A class's methods and constants can be mixed in to a module using the `include` keyword",
    "option_c": "A class and a module are the same thing in Ruby",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 52,
    "code": "RUB",
    "section_id": 6,
    "title": "What does `include` do when used with a module in Ruby?",
    "description": "",
    "option_a": "`include` mixes in the methods and constants of a module into a class as instance methods and constants",
    "option_b": "`include` mixes in the methods and constants of a class into a module as class methods and constants",
    "option_c": "`include` mixes in the methods and constants of a module into a module as instance methods and constants",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 53,
    "code": "RUB",
    "section_id": 6,
    "title": "What does `extend` do when used with a module in Ruby?",
    "description": "",
    "option_a": "`extend` mixes in the methods and constants of a module into a class as class methods and constants",
    "option_b": "`extend` mixes in the methods and constants of a class into a module as instance methods and constants",
    "option_c": "`extend` mixes in the methods and constants of a module into a module as class methods and constants",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 54,
    "code": "RUB",
    "section_id": 6,
    "title": "What is the difference between `include` and `extend` when used with a module in Ruby?",
    "description": "",
    "option_a": "`include` mixes in the methods and constants of a module into a class as instance methods and constants, while `extend` mixes in the methods and constants of a module into a class as class methods and constants",
    "option_b": "`include` mixes in the methods and constants of a module into a class as class methods and constants, while `extend` mixes in the methods and constants of a module into a class as instance methods and constants",
    "option_c": "`include` and `extend` are used interchangeably in Ruby",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 55,
    "code": "RUB",
    "section_id": 6,
    "title": "What is a mixin in Ruby and how is it used?",
    "description": "",
    "option_a": "A mixin is a module that contains a set of methods and constants that can be mixed in to a class using the `include` keyword. Mixins are used to share behavior across multiple classes without the use of inheritance",
    "option_b": "A mixin is a type of class that cannot be instantiated. Mixins are used to define abstract behavior that can be implemented by a class",
    "option_c": "A mixin is a type of method that can only be used within a single class definition",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 56,
    "code": "RUB",
    "section_id": 6,
    "title": "What does the following code do?\n\n```\nmodule Foo\n  def bar\n    puts \"Hello, world!\"\n  end\nend\n\nclass Baz\n  include Foo\nend\n\nBaz.new.bar\n```",
    "description": "",
    "option_a": "It defines a module called `Foo` that contains a method called `bar`. It defines a class called `Baz` that includes the `Foo` module using the `include` keyword. The code creates a new instance of `Baz` and calls its `bar` method, which prints `Hello, world!`",
    "option_b": "It defines a module called `Foo` that contains a method called `bar`. It defines a class called `Baz` that extends the `Foo` module using the `extend` keyword. The code creates a new instance of `Baz` and calls its `bar` method, which prints `Hello, world!`",
    "option_c": "It defines a module called `Foo` that contains a method called `bar`. It defines a class called `Baz` that includes the `Foo` module using the `include` keyword. The code raises an error because `bar` is not defined for instances of `Baz`",
    "option_d": "It defines a class called `Foo` that contains a method called `bar`. It defines a module called `Baz` that includes the `Foo` class using the `include` keyword. The code creates a new instance of `Baz` and calls its `bar` method, which prints `Hello, world!`",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 57,
    "code": "RUB",
    "section_id": 6,
    "title": "What is a namespace in Ruby and how is it used with modules?",
    "description": "",
    "option_a": "A namespace is a way of organizing code into a distinct area of scope to avoid naming conflicts. In Ruby, you can create a namespace using a module and the `::` notation",
    "option_b": "A namespace is a way of defining a class that is only available within a specific scope. In Ruby, you can create a namespace using the `private` keyword",
    "option_c": "A namespace is a way of defining a module that is only available within a specific class. In Ruby, you can create a namespace using the `include` keyword",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 58,
    "code": "RUB",
    "section_id": 6,
    "title": "What does the following code do?\n\n```\nmodule Foo\n  def self.bar\n    puts \"Hello, world!\"\n  end\nend\n\nclass Baz\n  extend Foo\nend\n\nBaz.bar\n```",
    "description": "",
    "option_a": "It defines a module called `Foo` that contains a class method called `bar`. It defines a class called `Baz` that extends the `Foo` module using the `extend` keyword. The code calls the `bar` method directly on the `Baz` class and prints `Hello, world!`",
    "option_b": "It defines a module called `Foo` that contains an instance method called `bar`. It defines a class called `Baz` that extends the `Foo` module using the `extend` keyword. The code raises an error because `bar` is not defined as a class method in `Foo`",
    "option_c": "It defines a class called `Foo` that contains an instance method called `bar`. It defines a class called `Baz` that extends the `Foo` class using the `extend` keyword. The code creates a new instance of `Baz` and calls its `bar` method, which prints `Hello, world!`",
    "option_d": "It defines a module called `Foo` that contains an instance method called `bar`. It defines a class called `Baz` that includes the `Foo` module using the `include` keyword. The code creates a new instance of `Baz` and calls its `bar` method, which prints `Hello, world!`",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 59,
    "code": "RUB",
    "section_id": 6,
    "title": "What is the purpose of the `require` keyword in Ruby?",
    "description": "",
    "option_a": "The `require` keyword is used to load external files or libraries into a Ruby program",
    "option_b": "The `require` keyword is used to define a constant in Ruby",
    "option_c": "The `require` keyword is used to create an instance of a class in Ruby",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 1
  },
  {
    "id": 60,
    "code": "RUB",
    "section_id": 6,
    "title": "What is the difference between `require` and `load` in Ruby?",
    "description": "",
    "option_a": "`require` loads a file only once, while `load` loads a file every time it is called",
    "option_b": "`load` loads a file only once, while `require` loads a file every time it is called",
    "option_c": "`require` and `load` are used interchangeably in Ruby",
    "option_d": "None of the above",
    "correct_answer": "a",
    "points": 1
  }
]